package com.salilsawant.urlshortener;

import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.When;
import cucumber.api.java.en.Then;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {UrlShorteningApplication.class})
public class UrlShortenerFeatureTest {

    @Given("^I am user")
    public void i_am_user() {
        //TBC
    }


    @When("^I try to create account with a non-existing accountid")
    public void i_try_to_create_account_with_a_nonexisting_accountid() { }


    @Then("^An account with the given accountId is created with its auto-generated password returned")
    public void an_account_with_the_given_accountid_is_created_with_its_autogenerated_password_returned() { }


    @When("^I try to create account with an invalid accountid")
    public void i_try_to_create_account_with_an_invalid_accountid() { }


    @Then("^Account can not be created and an invalid accountid message returned")
    public void account_can_not_be_created_and_an_invalid_accountid_message_returned() { }


    @When("^I try to create account with an existing accountid")
    public void i_try_to_create_account_with_an_existing_accountid() { }


    @Then("^Account can not be created and an existing accountid message returned")
    public void account_can_not_be_created_and_an_existing_accountid_message_returned() { }


    @Given("^I am an authorized account holder with a basic authorization token")
    public void i_am_an_authorized_account_holder_with_a_basic_authorization_token() { }


    @When("^I try to register a valid url")
    public void i_try_to_register_a_valid_url() { }


    @Then("^the url is registered and shortened url returned")
    public void the_url_is_registered_and_shortened_url_returned() { }


    @Given("^I do not have an authorized account holder")
    public void i_do_not_have_an_authorized_account_holder() { }


    @When("^I try to register an url")
    public void i_try_to_register_an_url() { }


    @Then("^an invalid auth token message is returned")
    public void an_invalid_auth_token_message_is_returned() { }



    @When("^I try to register an invalid url")
    public void i_try_to_register_an_invalid_url() { }


    @Then("^the url is not registered and an invalid url message returned")
    public void the_url_is_not_registered_and_an_invalid_url_message_returned() { }


    @When("^I try to register an already registered url")
    public void i_try_to_register_an_already_registered_url() { }


    @Then("^the url is not registered and an url already registered message returned")
    public void the_url_is_not_registered_and_an_url_already_registered_message_returned() { }


    @When("^I try to access the account statistics")
    public void i_try_to_access_the_account_statistics() { }


    @Then("^the account statistics are returned")
    public void the_account_statistics_are_returned() { }


    @When("^I try to access different account statistics")
    public void i_try_to_access_different_account_statistics() { }


    @Then("^an unauthorized access message is returned")
    public void an_unauthorized_access_message_is_returned() { }



}
